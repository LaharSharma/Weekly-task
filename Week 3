1. Consider an array MARKS[20][5] which sotes the makrs obbtained by 20 students in 5 subjects . Now write a program to"
 a) find the average marks obtained in each subject
 b) find the average marks obtained by every student
 c)findt eht number of students who have scored below 50 in their average
 d) display the scores obtaind by every student

#include <stdio.h>

int main() {
    int MARKS[20][5];
    int i, j;
    float subAvg[5] = {0};    // average of each subject
    float stuAvg[20] = {0};   // average of each student
    int below50 = 0;          // counter for students < 50

    // Input marks
    printf("Enter marks of 20 students in 5 subjects:\n");
    for (i = 0; i < 20; i++) {
        printf("Enter marks for student %d:\n", i + 1);
        for (j = 0; j < 5; j++) {
            scanf("%d", &MARKS[i][j]);
        }
    }

    // (a) Subject-wise average
    for (j = 0; j < 5; j++) {
        int sum = 0;
        for (i = 0; i < 20; i++) {
            sum += MARKS[i][j];
        }
        subAvg[j] = sum / 20.0;
    }

    // (b) Student-wise average + (c) check below 50
    for (i = 0; i < 20; i++) {
        int sum = 0;
        for (j = 0; j < 5; j++) {
            sum += MARKS[i][j];
        }
        stuAvg[i] = sum / 5.0;
        if (stuAvg[i] < 50)
            below50++;
    }

    // Display results
    printf("\nAverage marks in each subject:\n");
    for (j = 0; j < 5; j++) {
        printf("Subject %d: %.2f\n", j + 1, subAvg[j]);
    }

    printf("\nAverage marks of each student:\n");
    for (i = 0; i < 20; i++) {
        printf("Student %d: %.2f\n", i + 1, stuAvg[i]);
    }

    printf("\nNumber of students with average < 50 = %d\n", below50);

    // (d) Display scores of every student
    printf("\nScores obtained by every student:\n");
    for (i = 0; i < 20; i++) {
        printf("Student %d: ", i + 1);
        for (j = 0; j < 5; j++) {
            printf("%d ", MARKS[i][j]);
        }
        printf("\n");
    }

    return 0;
}


2. write a program that reads an array of 100 integersa display all the paris of elemts where sum is 50 in c


#include <stdio.h>

int main() {
    int arr[100];
    int i, j;

    // Step 1: Input 100 integers
    printf("Enter 100 integers:\n");
    for (i = 0; i < 100; i++) {
        scanf("%d", &arr[i]);
    }

    // Step 2: Find and display pairs with sum = 50
    printf("\nPairs of elements with sum = 50:\n");
    for (i = 0; i < 100; i++) {
        for (j = i + 1; j < 100; j++) {
            if (arr[i] + arr[j] == 50) {
                printf("(%d, %d)\n", arr[i], arr[j]);
            }
        }
    }

    return 0;
}


3. Interchanging the second and the second last element in an array


#include <stdio.h>

int main() {
    int n, i;

    // Step 1: Input size
    printf("Enter size of array: ");
    scanf("%d", &n);

    int arr[n];

    // Step 2: Input array
    printf("Enter %d elements:\n", n);
    for (i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    // Step 3: Display original array
    printf("\nOriginal array:\n");
    for (i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }

    // Step 4: Swap 2nd element with 2nd last element
    if (n >= 2) {
        int temp = arr[1];             // second element (index 1)
        arr[1] = arr[n - 2];           // second last element (index n-2)
        arr[n - 2] = temp;
    }

    // Step 5: Display updated array
    printf("\n\nArray after swapping second and second last elements:\n");
    for (i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }

    return 0;
}


4. A program that calculate the sum of squares of the elements


#include <stdio.h>

int main() {
    int n, i;
    int sum = 0;

    // Step 1: Input size
    printf("Enter size of array: ");
    scanf("%d", &n);

    int arr[n];

    // Step 2: Input array
    printf("Enter %d elements:\n", n);
    for (i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    // Step 3: Calculate sum of squares
    for (i = 0; i < n; i++) {
        sum += arr[i] * arr[i];
    }

    // Step 4: Display result
    printf("\nSum of squares of elements = %d\n", sum);

    return 0;
}


5. A program to compute the sum and mean of the elements of a two-dimensional array
#include <stdio.h>

int main() {
    int rows, cols, i, j;
    int sum = 0;
    float mean;

    // Step 1: Input size
    printf("Enter number of rows: ");
    scanf("%d", &rows);
    printf("Enter number of columns: ");
    scanf("%d", &cols);

    int arr[rows][cols];

    // Step 2: Input array elements
    printf("Enter elements of the %dx%d array:\n", rows, cols);
    for (i = 0; i < rows; i++) {
        for (j = 0; j < cols; j++) {
            scanf("%d", &arr[i][j]);
        }
    }

    // Step 3: Calculate sum
    for (i = 0; i < rows; i++) {
        for (j = 0; j < cols; j++) {
            sum += arr[i][j];
        }
    }

    // Step 4: Calculate mean
    mean = (float)sum / (rows * cols);

    // Step 5: Display results
    printf("\nSum of all elements = %d\n", sum);
    printf("Mean of all elements = %.2f\n", mean);

    return 0;
}

6. A program to read and display a square(using function)
#include <stdio.h>

// Function to read a square matrix
void readMatrix(int arr[10][10], int n) {
    int i, j;
    printf("Enter elements of %dx%d matrix:\n", n, n);
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            scanf("%d", &arr[i][j]);
        }
    }
}

// Function to display a square matrix
void displayMatrix(int arr[10][10], int n) {
    int i, j;
    printf("\nThe %dx%d matrix is:\n", n, n);
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            printf("%d ", arr[i][j]);
        }
        printf("\n");  // new line after each row
    }
}

int main() {
    int n;
    int arr[10][10];

    printf("Enter size of square matrix (max 10): ");
    scanf("%d", &n);

    // Call functions
    readMatrix(arr, n);
    displayMatrix(arr, n);

    return 0;
}



7. A program that computes the sum of the elements that are stored on the main diagonal of a matrix using pointers.
#include <stdio.h>

int main() {
    int n, i;
    int arr[10][10];
    int sum = 0;

    printf("Enter size of square matrix (max 10): ");
    scanf("%d", &n);

    printf("Enter elements of %dx%d matrix:\n", n, n);
    for (i = 0; i < n * n; i++) {
        scanf("%d", (*(arr) + i));  // using pointer to read elements
    }

    // Compute sum of diagonal using pointers
    for (i = 0; i < n; i++) {
        sum += *(*(arr + i) + i);  // element at [i][i]
    }

    printf("\nSum of main diagonal elements = %d\n", sum);

    return 0;
}



8. A program to add two 3*3 matrix using pointers
#include <stdio.h>

int main() {
    int a[3][3], b[3][3], sum[3][3];
    int *p, *q, *r;
    int i, j;

    // Input first matrix
    printf("Enter elements of first 3x3 matrix:\n");
    for (i = 0; i < 3; i++) {
        for (j = 0; j < 3; j++) {
            scanf("%d", &a[i][j]);
        }
    }

    // Input second matrix
    printf("Enter elements of second 3x3 matrix:\n");
    for (i = 0; i < 3; i++) {
        for (j = 0; j < 3; j++) {
            scanf("%d", &b[i][j]);
        }
    }

    // Assign base addresses to pointers
    p = &a[0][0];
    q = &b[0][0];
    r = &sum[0][0];

    // Add matrices using pointers
    for (i = 0; i < 9; i++) {
        *(r + i) = *(p + i) + *(q + i);
    }

    // Display the result
    printf("Sum of two matrices:\n");
    for (i = 0; i < 3; i++) {
        for (j = 0; j < 3; j++) {
            printf("%d\t", sum[i][j]);
        }
        printf("\n");
    }

    return 0;
}




9. A program that computes the producct of the elements tha are stored on the main diagonal above the main diagonal
#include <stdio.h>

int main() {
    int n, i, j;
    long long product = 1; // use long long to avoid overflow

    printf("Enter the size of square matrix: ");
    scanf("%d", &n);

    int a[n][n];

    // Input matrix
    printf("Enter elements of %dx%d matrix:\n", n, n);
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            scanf("%d", &a[i][j]);
        }
    }

    // Compute product of elements on and above main diagonal
    for (i = 0; i < n; i++) {
        for (j = i; j < n; j++) {   // start from column = row (main diagonal)
            product *= a[i][j];
        }
    }

    // Display result
    printf("Product of elements on and above main diagonal = %lld\n", product);

    return 0;
}




10. Write a program to count the total number of non-zro elements in a two-dimensional array
#include <stdio.h>

int main() {
    int rows, cols, i, j, count = 0;

    // Input rows and columns
    printf("Enter number of rows: ");
    scanf("%d", &rows);
    printf("Enter number of columns: ");
    scanf("%d", &cols);

    int arr[rows][cols];

    // Input elements
    printf("Enter elements of the %dx%d array:\n", rows, cols);
    for (i = 0; i < rows; i++) {
        for (j = 0; j < cols; j++) {
            scanf("%d", &arr[i][j]);
        }
    }

    // Count non-zero elements
    for (i = 0; i < rows; i++) {
        for (j = 0; j < cols; j++) {
            if (arr[i][j] != 0) {
                count++;
            }
        }
    }

    // Display result
    printf("Total number of non-zero elements = %d\n", count);

    return 0;
}




11. Write a program to input the elements of a two dimensional array. Then from this array, make two  arraysâ€”one that stores all odd elements of the two-dimensional array and the other that stores all even elements of the array.

#include <stdio.h>

int main() {
    int mat[10][10];
    int rows, cols, i, j;
    int odd_array[100], even_array[100];
    int odd_count = 0, even_count = 0;

    printf("Enter the number of rows and columns: ");
    scanf("%d %d", &rows, &cols);

    printf("Enter the matrix elements:\n");
    for (i = 0; i < rows; i++) {
        for (j = 0; j < cols; j++) {
            scanf("%d", &mat[i][j]);
            // check if the element is even or odd and store it
            if (mat[i][j] % 2 == 0) {
                even_array[even_count++] = mat[i][j];
            } else {
                odd_array[odd_count++] = mat[i][j];
            }
        }
    }

    printf("\nOdd elements array:\n");
    for (i = 0; i < odd_count; i++) {
        printf("%d ", odd_array[i]);
    }
    printf("\n");

    printf("\nEven elements array:\n");
    for (i = 0; i < even_count; i++) {
        printf("%d ", even_array[i]);
    }
    printf("\n");

    return 0;
}



12. Write a program to read two floating point numbe arrays. Merge the two arrays and display the resultant array in reverse order.

#include <stdio.h>

int main() {
    float arr1[50], arr2[50], merged_array[100];
    int n1, n2, i, merged_size;

    printf("Enter the size of the first array: ");
    scanf("%d", &n1);
    printf("Enter its elements: ");
    for (i = 0; i < n1; i++) scanf("%f", &arr1[i]);

    printf("Enter the size of the second array: ");
    scanf("%d", &n2);
    printf("Enter its elements: ");
    for (i = 0; i < n2; i++) scanf("%f", &arr2[i]);

    merged_size = n1 + n2;

    // First, copy elements from the first array
    for (i = 0; i < n1; i++) {
        merged_array[i] = arr1[i];
    }
    // Then, append elements from the second array
    for (i = 0; i < n2; i++) {
        merged_array[n1 + i] = arr2[i];
    }

    printf("\nMerged array in reverse order:\n");
    // Print the merged array starting from the end
    for (i = merged_size - 1; i >= 0; i--) {
        printf("%.2f ", merged_array[i]);
    }
    printf("\n");

    return 0;
}



13. Write a program using pointers to interchange the second biggest and the second smallest number in the array.

#include <stdio.h>

int main() {
    int arr[100], n, i;
    int smallest, second_smallest, largest, second_largest;
    int pos_ss = -1, pos_sl = -1;
    int *ptr_ss, *ptr_sl, temp;

    printf("Enter the number of elements: ");
    scanf("%d", &n);

    if (n < 2) {
        printf("Need at least two elements.\n");
        return 1;
    }

    printf("Enter %d elements: ", n);
    for (i = 0; i < n; i++) scanf("%d", &arr[i]);

    // Initialize with the first two elements to handle various cases
    if (arr[0] > arr[1]) {
        largest = arr[0];
        second_largest = arr[1];
        smallest = arr[1];
        second_smallest = arr[0];
    } else {
        largest = arr[1];
        second_largest = arr[0];
        smallest = arr[0];
        second_smallest = arr[1];
    }
    
    // Find the required elements
    for (i = 2; i < n; i++) {
        if (arr[i] > largest) {
            second_largest = largest;
            largest = arr[i];
        } else if (arr[i] > second_largest) {
            second_largest = arr[i];
        }

        if (arr[i] < smallest) {
            second_smallest = smallest;
            smallest = arr[i];
        } else if (arr[i] < second_smallest) {
            second_smallest = arr[i];
        }
    }

    // Find the indices to swap
    for(i = 0; i < n; i++) {
        if(arr[i] == second_smallest) pos_ss = i;
        if(arr[i] == second_largest) pos_sl = i;
    }

    if (pos_ss != -1 && pos_sl != -1) {
        printf("Swapping second smallest (%d) and second largest (%d).\n", second_smallest, second_largest);
        // Use pointers to perform the swap
        ptr_ss = &arr[pos_ss];
        ptr_sl = &arr[pos_sl];

        temp = *ptr_ss;
        *ptr_ss = *ptr_sl;
        *ptr_sl = temp;
    }

    printf("Array after interchanging:\n");
    for (i = 0; i < n; i++) printf("%d ", arr[i]);
    printf("\n");

    return 0;
}



14. Write a menu driven program to read and display a p x q x r matrix. Also, find the sum, transpose, and product of the two p x q x r matrices.

#include <stdio.h>

// Functions for 3D matrix operations
void read_3d(int mat[][5][5], int p, int q, int r) {
    printf("Enter elements:\n");
    for (int i = 0; i < p; i++)
        for (int j = 0; j < q; j++)
            for (int k = 0; k < r; k++)
                scanf("%d", &mat[i][j][k]);
}

void display_3d(int mat[][5][5], int p, int q, int r) {
    for (int i = 0; i < p; i++) {
        printf("Slice %d:\n", i + 1);
        for (int j = 0; j < q; j++) {
            for (int k = 0; k < r; k++) {
                printf("%d\t", mat[i][j][k]);
            }
            printf("\n");
        }
        printf("\n");
    }
}

void sum_3d(int m1[][5][5], int m2[][5][5], int sum[][5][5], int p, int q, int r) {
    for (int i = 0; i < p; i++)
        for (int j = 0; j < q; j++)
            for (int k = 0; k < r; k++)
                sum[i][j][k] = m1[i][j][k] + m2[i][j][k];
}

void product_3d(int m1[][5][5], int m2[][5][5], int prod[][5][5], int p, int q, int r) {
     for (int i = 0; i < p; i++)
        for (int j = 0; j < q; j++)
            for (int k = 0; k < r; k++)
                prod[i][j][k] = m1[i][j][k] * m2[i][j][k];
}


int main() {
    int mat1[5][5][5], mat2[5][5][5], res[5][5][5];
    int p, q, r, choice;

    printf("Enter dimensions (p q r, max 5x5x5): ");
    scanf("%d %d %d", &p, &q, &r);

    do {
        printf("\n---MENU---\n");
        printf("1. Read matrices\n2. Display matrices\n");
        printf("3. Sum of matrices\n4. Product (element-wise)\n");
        printf("5. Transpose (not implemented)\n6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter Matrix 1:\n"); read_3d(mat1, p, q, r);
                printf("Enter Matrix 2:\n"); read_3d(mat2, p, q, r);
                break;
            case 2:
                printf("--- Matrix 1 ---\n"); display_3d(mat1, p, q, r);
                printf("--- Matrix 2 ---\n"); display_3d(mat2, p, q, r);
                break;
            case 3:
                sum_3d(mat1, mat2, res, p, q, r);
                printf("--- Sum Matrix ---\n"); display_3d(res, p, q, r);
                break;
            case 4:
                product_3d(mat1, mat2, res, p, q, r);
                printf("--- Product Matrix ---\n"); display_3d(res, p, q, r);
                break;
            case 5:
                 printf("Transpose for 3D matrices is not a standard operation.\n");
                break;
            case 6: break;
            default: printf("Invalid choice!\n");
        }
    } while (choice != 6);

    return 0;
}



15. Write a program that reads a matrix and displays the sum of its diagonal elements.

#include <stdio.h>

int main() {
    int mat[10][10], size, i, sum = 0;

    printf("Enter the size of the square matrix: ");
    scanf("%d", &size);

    printf("Enter the matrix elements:\n");
    for (i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            scanf("%d", &mat[i][j]);
        }
    }
    
    // sum the diagonal elements where row index equals column index
    for (i = 0; i < size; i++) {
        sum += mat[i][i];
    }

    printf("The sum of the diagonal elements is: %d\n", sum);

    return 0;
}



16. Write a program that reads a matrix and displays the sum of the elements above the main diagonal.
 (Hint: Calculate the sum of elements Aij where i<j)


#include <stdio.h>

int main() {
    int mat[10][10], size, i, j, sum = 0;

    printf("Enter the size of the square matrix: ");
    scanf("%d", &size);

    printf("Enter the matrix elements:\n");
    for (i = 0; i < size; i++) {
        for (j = 0; j < size; j++) {
            scanf("%d", &mat[i][j]);
        }
    }

    // sum elements where the column index is greater than the row index
    for (i = 0; i < size; i++) {
        for (j = 0; j < size; j++) {
            if (j > i) {
                sum += mat[i][j];
            }
        }
    }

    printf("The sum of elements above the main diagonal is: %d\n", sum);

    return 0;
}



17. Write a program that reads a matrix and displays the sum of the elements below the main diagonal
#include <stdio.h>

int main() {
    int n, i, j, sum = 0;

    printf("Enter size of square matrix: ");
    scanf("%d", &n);

    int a[n][n];

    printf("Enter elements of %d x %d matrix:\n", n, n);
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            scanf("%d", &a[i][j]);
        }
    }

    // Calculate sum of elements below main diagonal (i > j)
    for (i = 0; i < n; i++) {
        for (j = 0; j < i; j++) {
            sum += a[i][j];
        }
    }

    printf("Sum of elements below main diagonal = %d\n", sum);

    return 0;
}



18. Write a program that reads a square matrix of size n x n. Write a function int isUpperTriangular (int a[][], int n) that returns 1 if the matrix is upper triangular.

#include <stdio.h>

int isUpperTriangular(int a[10][10], int n) {
    for (int i = 1; i < n; i++)
        for (int j = 0; j < i; j++)
            if (a[i][j] != 0)
                return 0;
    return 1;
}

int main() {
    int a[10][10], n, i, j;

    printf("Enter size of square matrix: ");
    scanf("%d", &n);

    printf("Enter elements:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            scanf("%d", &a[i][j]);

    if (isUpperTriangular(a, n))
        printf("Matrix is Upper Triangular\n");
    else
        printf("Matrix is NOT Upper Triangular\n");

    return 0;
}




19. Write a program that reads a square matrix of size n x n. Write a function int isLowerTriangular (int a[][], int n) that returns 1 if the matrix is lower triangular.

#include <stdio.h>

int isLowerTriangular(int a[10][10], int n) {
    for (int i = 0; i < n; i++)
        for (int j = i + 1; j < n; j++)
            if (a[i][j] != 0)
                return 0;
    return 1;
}

int main() {
    int a[10][10], n, i, j;

    printf("Enter size of square matrix: ");
    scanf("%d", &n);

    printf("Enter elements:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            scanf("%d", &a[i][j]);

    if (isLowerTriangular(a, n))
        printf("Matrix is Lower Triangular\n");
    else
        printf("Matrix is NOT Lower Triangular\n");

    return 0;
}



20. Write a program that reads a square matrix of size n Â¥ n. Write a function int isSymmetric (int a[][], int n) that returns 1 if the matrix is symmetric. (Hint: Array A is symmetric if Aij = Aji for all values of i and j)


#include <stdio.h>

int isSymmetric(int a[][10], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            // check if the element is different from its transpose
            if (a[i][j] != a[j][i]) {
                return 0; // not symmetric
            }
        }
    }
    return 1; // is symmetric
}

int main() {
    int mat[10][10], size, i, j;

    printf("Enter the size of the square matrix: ");
    scanf("%d", &size);

    printf("Enter the matrix elements:\n");
    for (i = 0; i < size; i++) {
        for (j = 0; j < size; j++) {
            scanf("%d", &mat[i][j]);
        }
    }

    if (isSymmetric(mat, size)) {
        printf("The matrix is symmetric.\n");
    } else {
        printf("The matrix is not symmetric.\n");
    }

    return 0;
}




21. Write a program to calculate XA + YB where A and B are matrices and X = 2 and Y = 3 .

#include <stdio.h>

int main() {
    int A[10][10], B[10][10], Result[10][10];
    int rows, cols, i, j;
    int X = 2, Y = 3;

    printf("Enter matrix dimensions (rows cols): ");
    scanf("%d %d", &rows, &cols);

    printf("Enter Matrix A:\n");
    for (i = 0; i < rows; i++)
        for (j = 0; j < cols; j++) scanf("%d", &A[i][j]);

    printf("Enter Matrix B:\n");
    for (i = 0; i < rows; i++)
        for (j = 0; j < cols; j++) scanf("%d", &B[i][j]);

    // Perform the calculation: 2A + 3B
    for (i = 0; i < rows; i++) {
        for (j = 0; j < cols; j++) {
            Result[i][j] = (X * A[i][j]) + (Y * B[i][j]);
        }
    }

    printf("\nResult of %dA + %dB is:\n", X, Y);
    for (i = 0; i < rows; i++) {
        for (j = 0; j < cols; j++) {
            printf("%d\t", Result[i][j]);
        }
        printf("\n");
    }

    return 0;
}



22.  Write a program to illustrate the use of a pointer that points to a 2D array.


#include <stdio.h>

// function accepts a pointer to an array of 5 integers
void display_with_pointer(int (*p)[5], int rows, int cols) {
    printf("\nDisplaying matrix using a pointer to an array:\n");
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("%d\n", p[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int mat[5][5] = { {1, 2, 3},{4, 5, 6},{7, 8, 9}};
    int rows = 3, cols = 3;

    display_with_pointer(mat, rows, cols);

    return 0;
}




23. Write a program to enter a number and break it into n number of digits.

#include <stdio.h>

int main() {
    int number;
    int digits[20], i = 0;

    printf("Enter a number: ");
    scanf("%d", &number);

    if (number == 0) {
        digits[i++] = 0;
    }
    
    // extract digits from right to left
    while (number > 0) {
        digits[i] = number % 10;
        number = number / 10;
        i++;
    }

    printf("The digits of the number are: ");
    // print in reverse to get the correct order
    for (int j = i - 1; j >= 0; j--) {
        printf("%d ", digits[j]);
    }
    printf("\n");

    return 0;
}



24. Write a program to delete all the duplicate entries from an array of n integers

#include <stdio.h>

int main() {
    int arr[100], n, i, j, k;

    printf("Enter size of array: ");
    scanf("%d", &n);

    printf("Enter %d elements:\n", n);
    for (i = 0; i < n; i++)
        scanf("%d", &arr[i]);

    for (i = 0; i < n; i++) {
        for (j = i + 1; j < n;) {
            if (arr[i] == arr[j]) {
                for (k = j; k < n - 1; k++)
                    arr[k] = arr[k + 1];
                n--;
            } else {
                j++;
            }
        }
    }

    printf("Array after removing duplicates:\n");
    for (i = 0; i < n; i++)
        printf("%d ", arr[i]);

    return 0;
}




25. Write a program to read a floating point array. Update the array to insert a new number at the specified location.


#include <stdio.h>

int main() {
    float arr[100];
    int n, pos, i;
    float val;

    printf("Enter size of array: ");
    scanf("%d", &n);

    printf("Enter %d elements:\n", n);
    for (i = 0; i < n; i++)
        scanf("%f", &arr[i]);

    printf("Enter position to insert (0-%d): ", n);
    scanf("%d", &pos);
    printf("Enter value to insert: ");
    scanf("%f", &val);

    if (pos < 0 || pos > n) {
        printf("Invalid position!\n");
        return 0;
    }

    for (i = n; i > pos; i--)
        arr[i] = arr[i - 1];

    arr[pos] = val;
    n++;

    printf("Updated array:\n");
    for (i = 0; i < n; i++)
        printf("%.2f ", arr[i]);

    return 0;
}
